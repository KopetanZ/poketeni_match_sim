// ZustandÁä∂ÊÖãÁÆ°ÁêÜ„Çπ„Éà„Ç¢

import { create } from 'zustand';
import { 
  TennisPlayer, 
  MatchState, 
  MatchConfig, 
  PointResult, 
  InterventionOpportunity,
  CoachInstruction,
  MatchResult 
} from '@/types/tennis';
import { RallySequence, generateRallySequence } from '@/lib/rallyGenerator';
import { 
  initializeMatch, 
  simulatePoint, 
  applyPointResult, 
  checkInterventionOpportunity,
  applyCoachInstruction,
  DEFAULT_MATCH_CONFIG 
} from './matchEngine';
import { generateInstructionChoices } from './coachInstructions';

interface AppState {
  // „Éó„É¨„Ç§„É§„Éº
  homePlayer: TennisPlayer | null;
  awayPlayer: TennisPlayer | null;
  
  // Ë©¶ÂêàÁä∂ÊÖã
  currentMatch: MatchState | null;
  matchHistory: PointResult[];
  
  // Áõ£Áù£‰ªãÂÖ•
  currentIntervention: InterventionOpportunity | null;
  availableInstructions: CoachInstruction[];
  isWaitingForIntervention: boolean;
  lastInterventionResult: { success: boolean; instruction: CoachInstruction | null; message: string } | null;
  
  // UIÁä∂ÊÖã
  isMatchActive: boolean;
  isAutoPlaying: boolean;
  autoPlaySpeed: number; // ms
  autoPlayMode: 'normal' | 'to_intervention' | 'to_end'; // Ëá™ÂãïÂÜçÁîü„É¢„Éº„Éâ
  
  // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥Èñ¢ÈÄ£
  lastPointResult: PointResult | null;
  
  // „É©„É™„ÉºÂèØË¶ñÂåñÈñ¢ÈÄ£
  rallyViewEnabled: boolean;
  currentRallySequence: RallySequence | null;
  isRallyPlaying: boolean; // „É©„É™„Éº„Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÂÜçÁîü‰∏≠„Éï„É©„Ç∞
  
  // „Ç¢„ÇØ„Ç∑„Éß„É≥
  setPlayers: (home: TennisPlayer, away: TennisPlayer) => void;
  startMatch: (config?: MatchConfig) => void;
  playNextPoint: () => Promise<PointResult>;
  handleIntervention: (instruction: CoachInstruction | null) => void;
  skipIntervention: () => void; // ‰ªãÂÖ•„Çí„Çπ„Ç≠„ÉÉ„Éó
  startAutoPlay: (mode?: 'normal' | 'to_intervention' | 'to_end') => void;
  stopAutoPlay: () => void;
  setAutoPlaySpeed: (speed: number) => void;
  resetMatch: () => void;
  clearLastPointResult: () => void;
  setRallyViewEnabled: (enabled: boolean) => void;
  clearRallySequence: () => void;
  setRallyPlaying: (playing: boolean) => void;
  clearInterventionResult: () => void;
}

export const useAppStore = create<AppState>((set, get) => ({
  // ÂàùÊúüÁä∂ÊÖã
  homePlayer: null,
  awayPlayer: null,
  currentMatch: null,
  matchHistory: [],
  currentIntervention: null,
  availableInstructions: [],
  isWaitingForIntervention: false,
  lastInterventionResult: null,
  isMatchActive: false,
  isAutoPlaying: false,
  autoPlaySpeed: 2000,
  autoPlayMode: 'normal',
  lastPointResult: null,
  rallyViewEnabled: true,
  currentRallySequence: null,
  isRallyPlaying: false,

  // „Éó„É¨„Ç§„É§„ÉºË®≠ÂÆö
  setPlayers: (home: TennisPlayer, away: TennisPlayer) => {
    set({ homePlayer: home, awayPlayer: away });
  },

  // Ë©¶ÂêàÈñãÂßã
  startMatch: (config = DEFAULT_MATCH_CONFIG) => {
    const { homePlayer, awayPlayer } = get();
    
    if (!homePlayer || !awayPlayer) {
      throw new Error('„Éó„É¨„Ç§„É§„Éº„ÅåË®≠ÂÆö„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì');
    }
    
    const matchState = initializeMatch(homePlayer, awayPlayer, config);
    
    set({
      currentMatch: matchState,
      matchHistory: [],
      currentIntervention: null,
      availableInstructions: [],
      isWaitingForIntervention: false,
      isMatchActive: true,
      isAutoPlaying: false
    });
  },

  // Ê¨°„ÅÆ„Éù„Ç§„É≥„Éà„Çí„Éó„É¨„Ç§
  playNextPoint: async (): Promise<PointResult> => {
    const state = get();
    
    if (!state.currentMatch || state.currentMatch.isMatchComplete) {
      throw new Error('Ë©¶Âêà„ÅåÈÄ≤Ë°å‰∏≠„Åß„ÅØ„ÅÇ„Çä„Åæ„Åõ„Çì');
    }
    
    // ‰ªãÂÖ•ÂæÖ„Å°„ÅÆÂ†¥Âêà„ÅØÂá¶ÁêÜ„Åó„Å™„ÅÑ
    if (state.isWaitingForIntervention) {
      throw new Error('Áõ£Áù£‰ªãÂÖ•ÂæÖ„Å°„Åß„Åô');
    }
    
    const matchState = { ...state.currentMatch };
    
    // ‰ªãÂÖ•„Çø„Ç§„Éü„É≥„Ç∞„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    const intervention = checkInterventionOpportunity(matchState);
    
    if (intervention && matchState.coachBudgetRemaining > 0) {
      // ‰ªãÂÖ•Ê©ü‰ºö„Åå„ÅÇ„ÇãÂ†¥Âêà
      const instructions = generateInstructionChoices(intervention, matchState.usedInstructions);
      
      set({
        currentIntervention: intervention,
        availableInstructions: instructions,
        isWaitingForIntervention: true,
        isAutoPlaying: false // Ëá™ÂãïÂÜçÁîü„ÇíÂÅúÊ≠¢
      });
      
      // ‰ªãÂÖ•ÂæÖ„Å°„Å™„ÅÆ„Åß„ÄÅÁ©∫„ÅÆ„Éù„Ç§„É≥„ÉàÁµêÊûú„ÇíËøî„Åô
      return {
        winner: 'home',
        reason: 'ace',
        description: 'Áõ£Áù£‰ªãÂÖ•ÂæÖ„Å°',
        wasInfluencedByInstruction: false,
        homeAttack: 0,
        awayAttack: 0,
        homeDefense: 0,
        awayDefense: 0,
        successRate: 0,
        roll: 0
      };
    }
    
    // ÈÄöÂ∏∏„ÅÆ„Éù„Ç§„É≥„Éà„Ç∑„Éü„É•„É¨„Éº„Ç∑„Éß„É≥
    const pointResult = simulatePoint(matchState);
    applyPointResult(matchState, pointResult);
    
    // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÊÉÖÂ†±„Çí„É≠„Ç∞Âá∫Âäõ
    console.log('üé¨ Point Animation Info:', {
      template: pointResult.animationTemplate,
      intensity: pointResult.intensity,
      rallyLength: pointResult.rallyLength,
      reason: pointResult.reason,
      wasInfluenced: pointResult.wasInfluencedByInstruction
    });
    
    const newHistory = [...state.matchHistory, pointResult];
    
    // „É©„É™„Éº„Ç∑„Éº„Ç±„É≥„ÇπÁîüÊàêÔºà„É©„É™„ÉºË°®Á§∫„ÅåÊúâÂäπ„Å™Â†¥ÂêàÔºâ
    let rallySequence: RallySequence | null = null;
    if (state.rallyViewEnabled && state.homePlayer && state.awayPlayer) {
      rallySequence = generateRallySequence(
        pointResult,
        state.homePlayer,
        state.awayPlayer,
        matchState.currentServer,
        false // TODO: deuceÂà§ÂÆö„ÇíÂÆüË£Ö
      );
    }
    
    set({
      currentMatch: matchState,
      matchHistory: newHistory,
      lastPointResult: pointResult,
      currentRallySequence: rallySequence,
      isRallyPlaying: rallySequence !== null // „É©„É™„Éº„Ç∑„Éº„Ç±„É≥„Çπ„Åå„ÅÇ„ÇãÂ†¥Âêà„ÅØÂÜçÁîü‰∏≠„Å´Ë®≠ÂÆö
    });
    
    // Ë©¶ÂêàÁµÇ‰∫Ü„ÉÅ„Çß„ÉÉ„ÇØ
    if (matchState.isMatchComplete) {
      set({ isMatchActive: false, isAutoPlaying: false });
    }
    
    return pointResult;
  },

  // Áõ£Áù£‰ªãÂÖ•Âá¶ÁêÜ
  handleIntervention: (instruction: CoachInstruction | null) => {
    const state = get();
    
    if (!state.currentMatch || !state.isWaitingForIntervention) {
      return;
    }
    
    const matchState = { ...state.currentMatch };
    let interventionResult = null;
    
    if (instruction) {
      // ÊåáÁ§∫„ÇíÈÅ©Áî®
      const result = applyCoachInstruction(matchState, instruction);
      console.log(result.message);
      
      // ‰ªãÂÖ•ÁµêÊûú„Çí‰øùÂ≠ò
      interventionResult = {
        success: result.success,
        instruction: instruction,
        message: result.message
      };
    } else {
      // null„ÅÆÂ†¥Âêà„ÅØ„Çπ„Ç≠„ÉÉ„Éó„Å®„Åó„Å¶Êâ±„ÅÜ
      // ‰ªãÂÖ•ÂõûÊï∞„ÅØÊ∂àË≤ª„Åó„Å™„ÅÑ„Åå„ÄÅÊ¨°„ÅÆ3„Éù„Ç§„É≥„Éà„ÅØ‰ªãÂÖ•‰∏çÂèØ„Å´„Åô„Çã
      matchState.lastInterventionPoint = matchState.currentPointNumber;
      
      // „Çπ„Ç≠„ÉÉ„ÉóÁµêÊûú„Çí‰øùÂ≠ò
      interventionResult = {
        success: false,
        instruction: null,
        message: '‰ªãÂÖ•„Çí„Çπ„Ç≠„ÉÉ„Éó„Åó„Åæ„Åó„Åü'
      };
    }
    
    // ‰ªãÂÖ•Áä∂ÊÖã„ÇíÂç≥Â∫ß„Å´„ÇØ„É™„Ç¢
    set({
      currentMatch: matchState,
      currentIntervention: null,
      availableInstructions: [],
      isWaitingForIntervention: false,
      lastInterventionResult: interventionResult
    });
    
    // ‰ªãÂÖ•Âá¶ÁêÜÂæå„ÅØÊâãÂãï„Åß„Éù„Ç§„É≥„ÉàÂÆüË°å„Åô„ÇãÂøÖË¶Å„Åå„ÅÇ„Çã
    // Ëá™ÂãïÂÆüË°å„ÅØÂâäÈô§„Åó„Å¶„ÄÅ„É¶„Éº„Ç∂„Éº„ÅåÊòéÁ§∫ÁöÑ„Å´„Éú„Çø„É≥„ÇíÊäº„Åô„ÅãËá™ÂãïÂÜçÁîü„ÇíÂÜçÈñã„Åô„Çã
  },

  // ‰ªãÂÖ•„Çí„Çπ„Ç≠„ÉÉ„Éó
  skipIntervention: () => {
    const state = get();
    
    if (!state.currentMatch || !state.isWaitingForIntervention) {
      return;
    }
    
    const matchState = { ...state.currentMatch };
    
    // ‰ªãÂÖ•Áä∂ÊÖã„Çí„ÇØ„É™„Ç¢„Åô„Çã„Åå„ÄÅ‰ªãÂÖ•ÂõûÊï∞„ÅØÊ∂àË≤ª„Åó„Å™„ÅÑ
    // ÊúÄÂæå„ÅÆ‰ªãÂÖ•„Éù„Ç§„É≥„Éà„ÇíÊõ¥Êñ∞„Åó„Å¶„ÄÅÊ¨°„ÅÆ3„Éù„Ç§„É≥„Éà„ÅØ‰ªãÂÖ•‰∏çÂèØ„Å´„Åô„Çã
    matchState.lastInterventionPoint = matchState.currentPointNumber;
    
    set({
      currentMatch: matchState,
      currentIntervention: null,
      availableInstructions: [],
      isWaitingForIntervention: false
    });
  },

  // Ëá™ÂãïÂÜçÁîüÈñãÂßã
  startAutoPlay: (mode: 'normal' | 'to_intervention' | 'to_end' = 'normal') => {
    const state = get();
    
    if (!state.isMatchActive || state.isWaitingForIntervention) {
      return;
    }
    
    set({ isAutoPlaying: true, autoPlayMode: mode });
    
    const playLoop = () => {
      const currentState = get();
      
      if (!currentState.isAutoPlaying || !currentState.isMatchActive) {
        return;
      }
      
      if (currentState.isWaitingForIntervention) {
        // ‰ªãÂÖ•ÂæÖ„Å°„ÅÆÂ†¥Âêà„ÅÆÂá¶ÁêÜ
        if (currentState.autoPlayMode === 'to_end') {
          // Ëá™Âãï‰ªãÂÖ•„Çπ„Ç≠„ÉÉ„Éó„Åó„Å¶Ë©¶ÂêàÁµÇ‰∫Ü„Åæ„ÅßÁ∂öË°å
          currentState.skipIntervention();
          setTimeout(playLoop, currentState.autoPlaySpeed);
        } else {
          // ÈÄöÂ∏∏„É¢„Éº„Éâ„Åæ„Åü„ÅØ‰ªãÂÖ•„Åæ„ÅßËá™ÂãïÂÜçÁîü„ÅÆÂ†¥Âêà„ÅØÂÅúÊ≠¢
          set({ isAutoPlaying: false });
        }
        return;
      }
      
      // „É©„É™„ÉºÂÜçÁîüÂæÖ„Å°„ÅÆÂ†¥Âêà„ÅØÂæÖÊ©ü
      if (currentState.isRallyPlaying) {
        setTimeout(playLoop, 200); // „É©„É™„ÉºÂÜçÁîü‰∏≠„ÅØ200msÂæå„Å´ÂÜç„ÉÅ„Çß„ÉÉ„ÇØ
        return;
      }
      
      currentState.playNextPoint()
        .then(() => {
          const newState = get();
          if (newState.isAutoPlaying && newState.isMatchActive && !newState.isWaitingForIntervention) {
            setTimeout(playLoop, newState.autoPlaySpeed);
          }
        })
        .catch((error) => {
          console.error('Ëá™ÂãïÂÜçÁîü„Ç®„É©„Éº:', error);
          set({ isAutoPlaying: false });
        });
    };
    
    setTimeout(playLoop, state.autoPlaySpeed);
  },

  // Ëá™ÂãïÂÜçÁîüÂÅúÊ≠¢
  stopAutoPlay: () => {
    set({ isAutoPlaying: false });
  },

  // Ëá™ÂãïÂÜçÁîüÈÄüÂ∫¶Ë®≠ÂÆö
  setAutoPlaySpeed: (speed: number) => {
    set({ autoPlaySpeed: speed });
  },

  // Ë©¶Âêà„É™„Çª„ÉÉ„Éà
  resetMatch: () => {
    set({
      currentMatch: null,
      matchHistory: [],
      currentIntervention: null,
      availableInstructions: [],
      isWaitingForIntervention: false,
      lastInterventionResult: null,
      isMatchActive: false,
      isAutoPlaying: false,
      lastPointResult: null
    });
  },

  // „Ç¢„Éã„É°„Éº„Ç∑„Éß„É≥ÁµêÊûú„ÇØ„É™„Ç¢
  clearLastPointResult: () => {
    set({ lastPointResult: null });
  },

  // „É©„É™„ÉºË°®Á§∫Ë®≠ÂÆö
  setRallyViewEnabled: (enabled: boolean) => {
    set({ rallyViewEnabled: enabled });
  },

  // „É©„É™„Éº„Ç∑„Éº„Ç±„É≥„Çπ„ÇØ„É™„Ç¢
  clearRallySequence: () => {
    set({ currentRallySequence: null, isRallyPlaying: false });
  },

  // „É©„É™„ÉºÂÜçÁîüÁä∂ÊÖãË®≠ÂÆö
  setRallyPlaying: (playing: boolean) => {
    set({ isRallyPlaying: playing });
  },

  // ‰ªãÂÖ•ÁµêÊûú„ÇØ„É™„Ç¢
  clearInterventionResult: () => {
    set({ lastInterventionResult: null });
  }
}));